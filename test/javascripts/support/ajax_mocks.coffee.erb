$.mockjaxSettings.logging = false

$.mockjax
  url: /^\/sites\/([\d]+)\/site_elements\/([\d\-]+)\.json$/
  urlParams: ['siteID', 'siteElementID']
  contentType: 'text/json'
  response: (settings) ->
    <%
      rule = Rule.new
      rule.site = Site.new
      site = SiteElement.new
      site.rule = rule
    %>
    siteElement = <%= SiteElementSerializer.new(site).to_json %>
    siteElement.id = settings.urlParams.siteElementID
    siteElement.site.id = settings.urlParams.siteID
    siteElement.element_subtype = "traffic"

    this.responseText = siteElement

$.mockjax
  url: /^\/sites\/([\d]+)\/identities\/([\w]+)\.json$/
  urlParams: ['siteID', 'provider']
  contentType: 'text/json'
  response: (settings) ->
    if settings.urlParams.provider == "mailchimp"
      this.responseText = JSON.stringify({
        id: 1
        site_id: settings.urlParams.siteID
        lists: [{id: 1, name: "my cool list"}, {id: 2, name: "my other cool list"}]
      })
    else
      this.responseText = {}

$.mockjax
  url: /^\/sites\/([\d]+)\/contact_lists\/([\w]+)\.json$/
  urlParams: ['siteID', 'contactListID']
  contentType: 'text/json'
  response: (settings) ->
    this.responseText = JSON.stringify({
      id: settings.urlParams.contactListID
      site_id: settings.urlParams.siteID
      name: "Contact List Name"
      provider: "mailchimp"
    })
