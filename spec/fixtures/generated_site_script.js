var HB_SITE_ID = 14797;\n\nHB_BACKEND_HOST = \"hi.hellobar.com\";\n\n// We use a variable called _hbq which is defined as just an empty array on the\n// user's page in the embed script (ensuring that it is present). This allows users\n// to push function calls into the _hbq array, e.g.:\n//\n//    _hbq.push(function(){alert(\"Hello Bar has loaded!\");});\n//\n// Because _hbq is defined on the page this will never error out - even if the HB script\n// fails to load. Once the HB script loads we replace the _hbq variable with a custom HBQ\n// object that has its own push method. HBQ#push just immediately calls the action.\n//\n// When HBQ is initialized we also kickstart the initialization process of Hello Bar:\nif (typeof(_hbq) == 'undefined'){_hbq=[];}\nvar HBQ = function()\n{\n  // Initialize the goals array so it can be pushed into\n  HB.goals = [];\n  // Need to load the serialized cookies\n  HB.loadCookies();\n  // Once initialized replace the existing data with it\n  if(typeof(_hbq) != \"undefined\" && _hbq && _hbq.length)\n  {\n    for(var i=0;i<_hbq.length;i++)\n      this.push(_hbq[i]);\n  }\n  // Set all the default tracking trackings\n  HB.setDefaultSegments();\n  // Apply the goals\n  HB.applyGoals();\n  \n  // As the user readjust the window size we need to adjust the size of the containing\n  // iframe. We do this by checking the the size of the inner div. If the the width\n  // of the window is less than or equal to 640 pixels we set the flag isMobileWidth to true.\n  // Note: we are not actually detecting a mobile device - just the width of the window. \n  // If isMobileWidth is true we add an additional \"mobile\" CSS class which is used to \n  // adjust the style of the bar.\n  // To accomplish all of this we set up an interval to monitor the size of everything:\n  HB.isMobileWidth = false;\n  var mobileDeviceInterval = setInterval(function(){\n    // Get the frame\n    var frame = window.frames[\"hellobar_container\"];\n    if ( !frame )\n      return;\n    // Get the relevant elements that might need checking/adjusting\n    var containerDocument = frame.document;\n    HB.e = {\n      container: HB.$(\"#hellobar_container\"),\n      pusher: HB.$(\"#hellobar_pusher\")\n    };\n    if (containerDocument) {\n      HB.e.bar = containerDocument.getElementById(\"hellobar\");\n      HB.e.shadow = containerDocument.getElementById(\"hellobar-shadow\");\n    }\n    // Monitor bar height to update HTML/CSS\n    if ( HB.e.bar )\n    {\n      if ( HB.e.bar.clientHeight )\n      {\n        // Adjust the shadow offset\n        if ( HB.e.shadow ) {\n          HB.e.shadow.style.top = (HB.e.bar.clientHeight+(HB.currentBar.show_border ? 0 : -1))+\"px\";\n          HB.e.shadow.style.display = \"block\";\n        }\n        // Adjust the container height\n        if ( HB.e.container )\n          HB.e.container.style.height = (HB.e.bar.clientHeight+8)+\"px\"; \n        // Adjust the pusher\n        if ( HB.e.pusher )\n          HB.e.pusher.style.height = (HB.e.bar.clientHeight+(HB.t(HB.currentBar.show_border) ? 3 : 0))+\"px\"; \n      }\n\n      // Update the CSS class based on the width\n      var origValue = HB.isMobileWidth;\n      HB.isMobileWidth = (HB.e.bar.clientWidth <= 640 );\n      if ( origValue == HB.isMobileWidth )\n        return;\n      if ( HB.isMobileWidth )\n        HB.addClass(HB.e.bar, \"mobile\");\n      else\n        HB.removeClass(HB.e.bar, \"mobile\");\n    } \n    \n  }, 50); // Check every 50ms\n}\n// Call the function right away once this is loaded\nHBQ.prototype.push = function()\n{\n  if ( arguments.length == 1 && typeof(arguments[0]) == \"function\" )\n    (arguments[0])();\n  else\n  {\n    var originalArgs = [];\n    for(var i=1;i<arguments.length;i++)\n    {\n      originalArgs.push(arguments[i]);\n    }\n    HB[arguments[0]].apply(HB, originalArgs); \n  }\n}\n// Keep everything within the HB namespace\n// **Special case: If a user includes multiple bars, to avoid overwriting the first bar and causing errors,\n// we manually set _HB to HB later before pushing goals.\nvar _HB = {\n  // Returns the element or looks it up via getElementById\n  $: function(idOrElement)\n  {\n    if ( typeof(idOrElement) == \"string\" )\n      return document.getElementById(idOrElement.replace(\"#\",\"\"));\n    else\n      return idOrElement;\n  },\n\n  // Returns whether or not a setting is true (treats \"false\" and string \"0\" as the boolean false)\n  t: function(value)\n  {\n    return (value && value != \"false\" && value != \"0\") ? true : false;\n  },\n\n  // Adds the CSS class to the target element\n  addClass: function(element, className)\n  {\n    element = HB.$(element);\n    element.className += \" \"+className;\n  },\n\n  // Remove the CSS class name from the element\n  removeClass: function(element, className)\n  {\n    element = HB.$(element);\n    // Get all the CSS class names and then add them\n    // back by building a new array minus the target CSS class name\n    var classNames = element.className.split(\" \");\n    var newClassNames = [];\n    for(var i=0;i<classNames.length;i++)\n    {\n      if ( classNames[i] != className )\n        newClassNames.push(classNames[i]);\n    }\n    element.className = newClassNames.join(\" \");\n  },\n\n  // Adds CSS to the page\n  addCSS: function(css)\n  {\n    if ( !HB.css )\n      HB.css = \"\";\n    HB.css += \"<style>\"+css+\"</style>\";\n  },\n\n  // Normalizes a URL so that \"https://www.google.com/#foo\" becomes \"http://google.com\"\n  // Also sorts the params alphabetically\n  n: function(url, pathOnly)\n  {\n    // Get rid of things that make no difference in the URL (such as protocol and anchor)\n    url = (url+\"\").toLowerCase().replace(/https?:\\/\\//,\"\").replace(/^www\\./,\"\").replace(/\\#.*/,\"\");\n    // Strip the host if pathOnly\n    if ( pathOnly )\n    {\n      // Unless it starts with a slash\n      if ( !url.match(/^\\//) )\n          url = url.replace(/.*?\\//, \"/\");\n    }\n    // Get the params \n    var urlParts = url.split(\"?\");\n    // If no params just return the URL\n    if ( !urlParts[1] )\n      return HB.stripTrailingSlash(urlParts[0]);\n    // Sort the params\n    return HB.stripTrailingSlash(urlParts[0])+\"?\"+urlParts[1].split(\"&\").sort().join(\"&\");\n  },\n\n  stripTrailingSlash: function(urlPart) {\n    return urlPart.replace(/(.+)\\/$/i, \"$1\");\n  },\n\n  // Returns true if the specified url matches the source pattern\n  umatch: function(srcPattern, url)\n  {\n    if ( srcPattern.indexOf(\"?\") == -1 ) // srcPattern does not have any query params...\n      return HB.n(srcPattern, true) == HB.n(url, true).split(\"?\")[0]; // ...so ignore them in the url\n    // Otherwise URLs must match exactly\n    return HB.n(srcPattern, true) == HB.n(url, true); \n  },\n\n  // Returns the standard bar params used for communicating with the backend server\n  attributeParams: function()\n  {\n    return \"a=\"+encodeURIComponent(\"all:all|\"+HB.serializeCookies(HB.cookies));\n  },\n\n  // Sends data to the tracking server (e.g. which bars viewed, if a goal was performed, etc)\n  s: function(url, paramString, callback)\n  {\n    if ( typeof(HB_DNT) != \"undefined\" || typeof(HB_SITE_ID) == \"undefined\")\n    {\n      if ( callback && typeof(callback) == \"function\" )\n        callback();\n      return;\n    }\n    var img = document.createElement('img');\n    img.style.display = 'none';\n    // Standard params\n    url += ((url.indexOf(\"?\") == -1) ? \"?\" : \"&\") + \"s=\"+HB_SITE_ID+\"&u=\"+HB.i();\n    // Extra params\n    if ( paramString )\n      url += ((paramString.indexOf(\"&\") == 0) ? \"\" : \"&\") + paramString;\n    // Make sure we return an image\n    url += \"&t=i\";\n\n    if ( callback )\n    {\n      // Make sure you only call the callback once\n      var issuedCallback = false;\n      var issueCallback = function(){\n        if( !issuedCallback)\n          callback();\n        issuedCallback = true;\n      };\n      // Call the callback within a set period of time in case the image\n      // does not load\n      setTimeout(issueCallback, 750);\n      img.onload = issueCallback;\n    }\n    img.src = HB.hi(url);\n  },\n\n  // Gets data from the tracking server such as what bar variation to render from a set of bars\n  g: function(url, paramString, callback)\n  {\n    var script = document.createElement('script');\n    script.type = \"text/javascript\";\n    script.async = true;\n    // Standard params\n    url += ((url.indexOf(\"?\") == -1) ? \"?\" : \"&\") + \"s=\"+HB_SITE_ID+\"&u=\"+HB.i();\n    // Extra params\n    if ( paramString )\n      url += ((paramString.indexOf(\"&\") == 0) ? \"\" : \"&\") + paramString;\n    // Make sure we return Javascript \n    url += \"&t=j\"; \n    if ( callback )\n    {\n      // Create a new function that can be referenced in the global name space\n      if (!HB.cb)\n        HB.cb = [];\n      var responderName = \"HB.cb[\"+(HB.cb.length)+\"]\";\n      // Add the responder name to the request\n      url += \"&j=\"+encodeURIComponent(responderName);\n      // Make sure you only call the callback once\n      // We do this by setting a locally scoped variable, issuedCallback\n      var issuedCallback = false;\n      var issueCallback = function(result){\n        if( !issuedCallback)\n          callback(result);\n        issuedCallback = true;\n      };\n      // Set the global responder to issue the callback\n      HB.cb.push(function(result){\n        issueCallback(result);\n      });\n      // Call the callback within a set period of time in case the server\n      // does not respond - notice that result will be null and a subsequent\n      // response will be ignored\n      setTimeout(issueCallback, 750);\n    }\n    script.src = HB.hi(url);\n    // Insert the script\n    (document.head || document.body || document.childNodes[0]).appendChild(script);\n  },\n\n  // Returns the URL for the backend server (e.g. \"hi.hellobar.com\").\n  hi: function(url)\n  {\n    return (document.location.protocol == \"https:\" ? \"https\" : \"http\")+ \"://\"+HB_BACKEND_HOST+\"/\"+url;\n  },\n\n  // Recoards the goal being formed when the visitor clicks the specified element\n  trackClick: function(element)\n  {\n    var url = element.href;\n    HB.converted(function(){element.target == \"_blank\" ?  window.open(url) : document.location = url;});\n  },\n\n  // Called when the goal is perfomed (e.g. link clicked, email form filled out)\n  conversion: function(callback)\n  {\n    HB.setBarAttr(HB.bi, \"nc\", (HB.getBarAttr(HB.bi, \"nc\") || 0)+1);\n    HB.trigger(\"conversion\", HB.currentBar);\n    HB.s(\"c?b=\"+HB.bi, HB.attributeParams(), callback);\n  },\n\n  // This takes the the email field, name field, and target bar DOM element.\n  // It then checks the validity of the fields and if valid it records the \n  // email and then sets the message in the bar to \"Thank you\". If invalid it\n  // shakes the email field\n  submitEmail: function(emailField, nameField, targetBar)\n  {\n    HB.validateEmail(\n      emailField.value,\n      nameField.value,\n      function(){\n        targetBar.innerHTML='<span>Thank you!</span>';\n        HB.recordEmail(emailField.value, nameField.value, function(){\n          // Successfully saved\n        });\n      },\n      function(){\n        // Fail\n        HB.shake(emailField);\n      }\n    );\n  },\n\n  // Called to validate the email and name. Does not actually submit the email\n  validateEmail: function(email, name, successCallback, failCallback)\n  {\n    if ( email && email.match(/.+@.+\\..+/) )\n      successCallback();\n    else\n      failCallback();\n  },\n\n  // Called to record an email for the goal without validation (also used by submitEmail)\n  recordEmail: function(email, name, callback)\n  {\n    if ( email )\n    {\n      var params = [\"g=\"+HB.gi, \"e=\"+encodeURIComponent(email)];\n      if ( name )\n        params.push(\"n=\"+encodeURIComponent(name));\n\n      params.push(\"q=y\"); // only in staging\n\n      // Record the email address and then track that the goal was performed\n      HB.s(\"e\", params.join(\"&\"), function(){HB.converted(callback)});\n    }\n\n  },\n  // Serialzied the cookies object into a string that can be stored in a cookie. The \n  // cookies object should be in the form:\n  // {\n  //   bars: {\n  //     bar_id: {\n  //       first_view: timestamp,\n  //       last_view: timestamp,\n  //       num_views: count,\n  //       first_action: timestamp,\n  //       last_action: timestamp,\n  //       num_actions: count,\n  //       *custom: *value\n  //     }\n  //   },\n  //   user: {\n  //     first_visit: timestamp,\n  //     last_visit: timestamp,\n  //     num_visits: count,\n  //     *custom: *value\n  //   }\n  // }\n  serializeCookies: function(cookies)\n  {\n    if ( !cookies )\n      return \"\";\n    var result = \"\";\n    if ( cookies.user )\n    {\n      result += HB.serializeCookieValues(cookies.user);\n    }\n    result += \"^\";\n    if ( cookies.bars )\n    {\n      for(var barID in cookies.bars)\n      {\n        result += barID+\"|\"+HB.serializeCookieValues(cookies.bars[barID])+\"^\";\n      }\n    }\n    return result;\n  },\n\n  // Called by serializeCookies. Takes a hash (either user or bar) and\n  // serializes it into a string\n  serializeCookieValues: function(hash)\n  {\n    if ( !hash )\n      return \"\";\n    var pairs = [];\n    for(var key in hash)\n    {\n      var value = hash[key];\n      if (typeof(value) != \"function\" && typeof(value) != \"object\")\n      {\n        pairs.push(HB.sanitizeCookieValue(key)+\":\"+HB.sanitizeCookieValue(value));\n      }\n    }\n    return pairs.join(\"|\");\n  },\n\n  // Replaces all chars used within the serialization schema with a space\n  sanitizeCookieValue: function(value)\n  {\n    return (value+\"\").replace(/[\\^\\|\\,\\;\\n\\r]/g, \" \");\n  },\n\n  // Parses a cookie string into the object describe in serializeCookies\n  parseCookies: function(input)\n  {\n    var results = {};\n    if ( !input )\n      return {user:{}, bars:{}};\n    var parts = input.split(\"^\");\n\n    // Parse out the user uwhich is the first argument\n    results.user = HB.parseCookieValues(parts[0]);\n    // Parse out all the bars\n    results.bars = {};\n    for(var i=1;i<parts.length;i++)\n    {\n      if ( parts[i] ) // Ignore empty parts\n      {\n        var barData = parts[i].split(\"|\");\n        var barID = barData[0];\n        var barValues = barData.slice(1, barData.length);\n\n        results.bars[barID] = HB.parseCookieValues(barValues.join(\"|\"));\n      }\n    }\n    return results;\n  },\n\n  // Called by parseCookies. Takes a string (either user or bar) and\n  // parses it into a hash\n  parseCookieValues: function(string)\n  {\n    if ( !string )\n      return {};\n    var pairs = string.split(\"|\");\n    var results = {};\n    for(var i=0;i<pairs.length;i++)\n    {\n      var data = pairs[i].split(\":\");\n      var key = data[0];\n      var value = data.slice(1,data.length).join(\":\");\n\n      // Convert value to a number if it makes sense\n      if ( parseInt(value, 10) == value )\n          value = parseInt(value,10);\n      else if ( parseFloat(value) == value )\n          value = parseFloat(value);\n      results[key] = value;\n    }\n    return results;\n  },\n\n  // Loads the cookies from the browser cookies into global hash HB.cookies\n  // in the format of {bars: {id:{...}, id2:{...}}, user:{...}}\n  loadCookies: function()\n  {\n    // Don't let any cookies get set without a site ID\n    if ( typeof(HB_SITE_ID) == \"undefined\")\n      HB.cookies = {bars:{}, user:{}};\n    else\n      HB.cookies = HB.parseCookies(HB.gc(\"hb_\"+HB_SITE_ID));\n  },\n\n  // Saves HB.cookies into the actual cookie\n  saveCookies: function()\n  {\n    // Don't let any cookies get set without a site ID\n    if ( typeof(HB_SITE_ID) != \"undefined\")\n      HB.sc(\"hb_\"+HB_SITE_ID, HB.serializeCookies(HB.cookies), 365*5);\n  },\n\n  // Gets the user attribute specified by the key or returns null\n  getUserAttr: function(key)\n  {\n    return HB.cookies.user[key];\n  },\n\n  // Sets the user attribute specified by the key to the value in the HB.cookies hash\n  // Also updates the cookies via HB.saveCookies\n  setUserAttr: function(key, value, skipEmptyValue)\n  {\n    if ( skipEmptyValue && !value) // This allows us to only conditionally set values\n      return;\n    HB.cookies.user[key] = value;\n    HB.saveCookies();\n  },\n\n  // Gets the bar attribute from HB.cookies specified by the barID and key\n  getBarAttr: function(barID, key)\n  {\n    // Ensure barID is a string\n    barID = barID+\"\";\n    if ( !HB.cookies.bars[barID] )\n      return null;\n    return HB.cookies.bars[barID][key];\n  },\n\n  // Sets the bar attribute specified by the key and barID to the value in HB.cookies\n  // Also updates the cookies via HB.saveCookies\n  setBarAttr: function(barID, key, value)\n  {\n    // Ensure barID is a string\n    barID = barID+\"\";\n    if ( !HB.cookies.bars[barID] )\n      HB.cookies.bars[barID] = {};\n    HB.cookies.bars[barID][key] = value;\n    HB.saveCookies();\n  },\n\n  // Gets a cookie\n  gc: function(name)\n  {\n    var i,x,y,c=document.cookie.split(\";\");\n    for (i=0;i<c.length;i++)\n    {\n      x=c[i].substr(0,c[i].indexOf(\"=\"));\n      y=c[i].substr(c[i].indexOf(\"=\")+1);\n      x=x.replace(/^\\s+|\\s+$/g,\"\");\n      if (x==name)\n      {\n        return unescape(y);\n      }\n    }\n  },\n\n  // Sets a cookie\n  sc: function(name,value,exdays)\n  {\n    if ( typeof(HB_NC) != \"undefined\" )\n      return;\n    var exdate=new Date();\n    exdate.setDate(exdate.getDate() + exdays);\n    value=escape(value) + ((exdays==null) ? \"\" : \"; expires=\"+exdate.toUTCString());\n    document.cookie=name + \"=\" + value;\n  },\n\n  // Returns the visitor's unique ID which should be a random value\n  i: function()\n  {\n    var uuid;\n    // Check if we have a cookie\n    if ( uuid = HB.gc(\"hbuid\") )\n      return uuid; // If so return that\n    // Otherwise generate a new value\n    var d = new Date().getTime();\n    uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n    });\n    // Set it in the cookie\n    HB.sc(\"hbuid\", uuid, 5*365);\n\n    // Return it\n    return uuid;\n  },\n\n  // Calls the specificied callback once the DOM is ready.\n  domReady: function(callback)\n  {\n    // To save on script size we do the simplest possible thing which\n    // is to loop until the body exists\n    if ( document.body )\n      callback();\n    else\n    {\n      var intervalID = setInterval(function(){\n        if ( document.body )\n        {\n          callback();\n          clearInterval(intervalID);\n        }\n      }, 50);\n    }\n  },\n\n  // A global variable to store templates\n  templateHTML: {},\n\n  // Sets the template HTML. Note if you override getTemplate this will have\n  // no affect\n  setTemplate: function(type, html)\n  {\n    HB.templateHTML[type] = html;\n  },\n\n  // Returns the template HTML for the given bar. Most of the time the same\n  // template will be returned for the same bar. The values in {{}} are replaced with\n  // the values from the bar\n  //\n  // By default this just returns the HB.templateHTML variable for the given goal type\n  getTemplate: function(bar)\n  {\n    return HB.templateHTML[bar.template_name];\n  },\n\n  // Called before rendering. This lets you modify bar attributes.\n  // NOTE: bar is already a copy of the original bar so it can be \n  // safely modified.\n  prerender: function(bar)\n  {\n    return this.sanitize(bar);\n  },\n\n  // Takes each string value in the bar and escapes HTML < > chars\n  // with the matching symbol\n  sanitize: function(bar){\n    for (var k in bar){\n      if (bar.hasOwnProperty(k) && bar[k] && bar[k].replace)\n        bar[k] = bar[k].replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    }\n    return bar;\n  },\n\n  // Renders the html template for the bar by calling HB.parseTemplateVar for\n  // each {{...}} entry in the template\n  renderTemplate: function(html, bar)\n  {\n    return html.replace(/\\{\\{(.*?)\\}\\}/g, function(match, value){\n      return HB.parseTemplateVar(value, bar);\n    });\n  },\n\n  // Parses the value passed in in {{...}} for a template (which basically does an eval on it)\n  parseTemplateVar: function(value, bar)\n  {\n    try{value = eval(value)}catch(e){}\n    return (value === undefined ? \"\" : value);\n  },\n\n  // This lets users set a callback for a Hello Bar event specified by eventName (e.g. \"barShown\")\n  on: function(eventName, callback)\n  {\n    if (!HB.eventCallbacks)\n      HB.eventCallbacks = {};\n    if ( !HB.eventCallbacks[eventName] )\n      HB.eventCallbacks[eventName] = [];\n    HB.eventCallbacks[eventName].push(callback);\n  },\n\n  // This is called internally to trigger a Hello Bar event (e.g. \"barShown\")\n  // Although it may look like no arguments are passed to trigger that is not true.\n  // The first argument is the event name and all subsequent arguments are passed to\n  // any callbacks on that event. So HB.trigger(\"foo\", 1, 2) will pass the arguments (1,2)\n  // to each callback set via HB.on, so HB.on(\"foo\", function(a,b){alert(a+b)}) would alert\n  // 3 in this case.\n  trigger: function()\n  {\n    var eventName = arguments[0];\n    if ( HB.eventCallbacks && HB.eventCallbacks[eventName] )\n    {\n      var l = HB.eventCallbacks[eventName].length;\n      var origArgs = [];\n      for(var i=1;i<arguments.length;i++)\n      {\n        origArgs.push(arguments[i]);\n      }\n      for(i=0;i<l;i++)\n      {\n        // Notice that we do setTimeout which causes the callback to happen\n        // asynchronously\n        (function(eventName, i){\n          setTimeout(function(){\n            (HB.eventCallbacks[eventName][i]).apply(HB, origArgs);\n          }, i)\n        })(eventName, i);\n      }\n    }\n  },\n  \n  // Renders the bar\n  render: function(barToRender)\n  {\n    var barCopy = {};\n    // Make a copy of the bar\n    for(var k in barToRender)\n    {\n      barCopy[k] = barToRender[k];\n    }\n    // Call prerender\n    var bar = HB.prerender(barCopy);\n    HB.currentBar = bar;\n    HB.bi = bar.id;\n    // If there is a #nohb in the has we don't render anything\n    if ( document.location.hash == \"#nohb\" )\n      return;\n    // Replace all the templated variables\n    var html = HB.renderTemplate(this.getTemplate(bar)+\"\", bar);\n    // Once the dom is ready we inject the html returned from renderTemplate\n    HB.domReady(function(){\n      // Set an arbitrary timeout to prevent some rendering\n      // conflicts with certain sites\n      setTimeout(function(){\n        HB.injectBarHTML(html, bar);\n        // Track the view\n        HB.viewed();\n        // Monitor zoom scale events\n        HB.hideOnZoom();\n      }, 1);\n    });\n  },\n\n  // Called when the bar is viewed\n  viewed: function()\n  {\n    var nowDate = new Date();\n    var now = Math.round(nowDate.getTime()/1000);\n    var day = 24*60*60;\n    var currentBar\n\n    // Track first view and most recent view and time since\n    // last view\n    if (!HB.getBarAttr(HB.bi, \"fv\"))\n        HB.setBarAttr(HB.bi, \"fv\", now);\n    // Get the previous view\n    var previousView = HB.getBarAttr(HB.bi, \"lv\");\n\n    // Set the time since the last view as the number\n    // of days\n    if ( previousView )\n      HB.setBarAttr(HB.bi, \"ls\", Math.round((now-previousView)/day));\n    HB.setBarAttr(HB.bi, \"lv\", now);\n\n    // Set the total time seeing bar in number of days\n    HB.setBarAttr(HB.bi, \"lf\", Math.round((now-HB.getBarAttr(HB.bi, \"fv\"))/day));\n\n    // Track number of views\n    HB.setBarAttr(HB.bi, \"nv\", (HB.getBarAttr(HB.bi, \"nv\") || 0)+1);\n    HB.s(\"v?b=\"+HB.bi, HB.attributeParams());\n    // Trigger bar shown event\n    HB.trigger(\"barShown\", HB.currentBar);\n  },\n\n  hideOnZoom: function() {\n    // Doesn't work IE 9 and earlier\n    if (!window.addEventListener || !window.outerWidth || !window.innerWidth) return;\n\n    var original = HB.w.style.position;\n    var action = function(e) {\n      var ratio = (window.outerWidth - 8) / window.innerWidth;\n      if (e.scale) {\n        // iPhone\n        HB.w.style.position = (e.scale <= 1.03) ? original : 'absolute';\n      } else if (typeof window.orientation !== 'undefined') { // Not mobile\n        // Android\n        if (window.outerWidth <= 480 && ratio <= 1.3) {\n          return HB.w.style.position = original;\n        }\n        HB.w.style.position = (ratio <= 0.6) ? original : 'absolute';\n      } else {\n        // Desktop\n        HB.w.style.position = (ratio <= 1.3) ? original : 'absolute';\n      }\n    };\n\n    // iPhone\n    window.addEventListener('gesturechange', action);\n\n    // Android\n    window.addEventListener('scroll', action);\n  },\n\n  // Injects the specified element at the top of the body tag\n  injectAtTop:function(element)\n  {\n    if ( document.body.children[0] )\n      document.body.insertBefore(element,document.body.children[0]);\n    else\n      document.body.appendChild(element);\n  },\n\n  // Injects the specified HTML for the given bar into the page\n  injectBarHTML: function(html, bar)\n  {\n    // Remove the containing iframe element if it exists\n    if ( HB.w )\n      HB.w.parentNode.removeChild(HB.w);\n    // Create the iframe container\n    HB.w = document.createElement(\"iframe\");\n    HB.w.src = \"about:blank\";\n    HB.w.id = \"hellobar_container\";\n    HB.w.name = \"hellobar_container\";\n    // Set any necessary CSS classes\n    HB.w.className = bar.size+(HB.t(bar.remains_at_top) ? \" remains_at_top\" : \"\");\n    HB.w.scrolling = \"no\";\n    // Remove the pusher if it exists\n    if ( HB.p )\n      HB.p.parentNode.removeChild(HB.p);\n    HB.p = null;\n    // Create the pusher (which pushes the page down) if needed\n    if ( HB.t(bar.pushes_page_down) )\n    {\n      HB.p = document.createElement(\"div\");\n      HB.p.id=\"hellobar_pusher\";\n      HB.p.className = bar.size;\n      HB.injectAtTop(HB.p);\n    }\n    // Check if we have any external CSS to add\n    if ( HB.extCSS )\n    {\n      // If we have already added it, remove it and re-add it\n      if ( HB.extCSSStyle )\n        HB.extCSSStyle.parentNode.removeChild(HB.extCSSStyle);\n      // Create the CSS style tag\n      HB.extCSSStyle = document.createElement('STYLE');\n      HB.extCSSStyle.type=\"text/css\";\n      if(HB.extCSSStyle.styleSheet)\n      {\n        HB.extCSSStyle.styleSheet.cssText=HB.extCSS;\n      }\n      else\n      {\n        HB.extCSSStyle.appendChild(document.createTextNode(HB.extCSS));\n      }\n      var head=document.getElementsByTagName('HEAD')[0];\n      head.appendChild(HB.extCSSStyle);\n    }\n    // Inject the container into the DOM\n    HB.injectAtTop(HB.w);\n    // Render the bar in the container.\n    var d = HB.w.contentWindow.document;\n    d.open();\n    d.write((HB.css || \"\")+html);\n    d.close();\n  },\n\n  // Adds a goal to the list of goals. The method is a function that returns true if the given\n  // visitor is eligible for the goal. The bars is the list of bars for the given goal. Priority\n  // is a numeric value and metadata is a hash of settings for the goal.\n  addGoal: function(method, bars, priority, metadata)\n  {\n    // First check to see if bars is an array, and make it one if it is not\n    if (Object.prototype.toString.call(bars) !== \"[object Array]\")\n      bars = [bars];\n    if ( !priority )\n      priority = 0;\n    // Create the goal\n    var goal = {method: method, bars: bars, priority: priority, data: metadata};\n    HB.goals.push(goal);\n    // Set the goal on all of the bars\n    for(var i=0;i<bars.length;i++)\n    {\n      bars[i].goal = goal;\n    }\n  },\n\n  // applyGoals scans through all the goals added via addGoal and finds the\n  // highest priority goal the visitor is eligible for. Once found it sends\n  // all the eligible bars to the backend server which then returns with which\n  // variation to show.\n  applyGoals: function()\n  {\n    // Sort the goals\n    HB.goals.sort(function(a,b){\n      if ( a.priority > b.priority )\n        return 1;\n      else if ( a.priority < b.priority )\n        return -1;\n      else\n        return 0;\n    });\n    // Determine the first goal the visitor is eligible for\n    for(var i=0;i<HB.goals.length;i++)\n    {\n      var goal = HB.goals[i];\n      if ( goal.method() ) // Did the method return true?\n      {\n        // Found a match\n        // If there is bar then render it\n        if ( goal.bars && goal.bars.length > 0 && goal.bars[0])\n        {\n          HB.currentGoal = goal;\n          HB.gi = goal.data.id;\n          // Check to see if the user is eligible for any bars\n          var eligibleBars = [];\n          for(var j=0;j<goal.bars.length;j++)\n          {\n            var bar = goal.bars[j];\n            bar.goal = goal;\n            if ( !bar.target ) {\n              eligibleBars.push(bar); // If there is no target it is eligible for everyone\n            }\n            else\n            {\n              // Check to see if the segment matches if this is a targeted bar\n              var parts = bar.target.split(\":\");\n              var key = parts[0];\n              var value = parts.slice(1,parts.length).join(\":\");\n              if ( (typeof HB_ALLOW_ALL !== \"undefined\" && HB_ALLOW_ALL) || (HB.getUserAttr(key) || \"\").toLowerCase() == value.toLowerCase())\n                eligibleBars.push(bar);\n            }\n          }\n          // See if we have just one eligible bar in which case render it\n          if ( eligibleBars.length == 1 )\n          {\n            HB.render(eligibleBars[0]);\n            return true;\n          }\n          else if ( eligibleBars.length > 1 )\n          {\n            // We need to ask the server which bar is the best. \n            HB.pickBestBar(eligibleBars);\n            return true;\n          }\n          else\n          {\n            // No match\n            HB.currentGoal = null;\n            HB.gi = null;\n          }\n        }\n      }\n    }\n  },\n\n  // This takes an array of bars and sends them to the backend server\n  // which will then determine which bar to show. However, if we have\n  // already shown a user one of these bars before we just show them the\n  // same bar again for consistency and to save a server trip.\n  pickBestBar: function(bars)\n  {\n    var barIDs = [];\n    var mostViewedBar;\n\n    // We need to check to see if we've already shown a user one of these\n    // bars. If so we should save the server trip and just show them the\n    // same bar again.\n    for(var i=0;i<bars.length;i++)\n    {\n      var barID = bars[i].id;\n      var numViews = HB.getBarAttr(barID, \"nv\") || 0;\n      if ( numViews > 0 && (!mostViewedBar || numViews > mostViewedBar.views))\n        mostViewedBar = {views: numViews, bar: bars[i]};\n      barIDs.push(barID);\n    }\n    // If we found a match return it;\n    if ( mostViewedBar )\n      return HB.render(mostViewedBar.bar);\n    // Send a request to the server. However, if we don't get a response in time\n    // we just need to show a random bar (and be sure to ignore the response later)\n    HB.g(\"b?b=\"+barIDs.join(\",\"), HB.attributeParams(), function(result){\n      if ( result )\n      {\n        // Render the selected bar\n        for(var j=0;j<bars.length;j++)\n        {\n          if ( bars[j].id == result )\n          {\n            HB.render(bars[j]);\n            return;\n          }\n        }\n      }\n      // Either couldn't find the resulting bar or there was no result (possibly\n      // due to server time out), so pick a random bar and use it instead.\n      var choice = Math.floor((Math.random()*bars.length))\n      var bar = bars[choice];\n      HB.render(bar);\n    });\n  },\n\n  // This just sets the default segments/tracking data for the user\n  // (such as when the suer visited, referrer, etc)\n  setDefaultSegments: function()\n  {\n    var nowDate = new Date();\n    var now = Math.round(nowDate.getTime()/1000);\n    var day = 24*60*60;\n\n    // Track first visit and most recent visit and time since\n    // last visit\n    if (!HB.getUserAttr(\"fv\"))\n        HB.setUserAttr(\"fv\", now);\n    // Get the previous visit\n    var previousVisit = HB.getUserAttr(\"lv\");\n\n    // Set the time since the last visit as the number\n    // of days\n    if ( previousVisit )\n      HB.setUserAttr(\"ls\", Math.round((now-previousVisit)/day));\n    HB.setUserAttr(\"lv\", now);\n\n    // Set the life of the visitor in number of days\n    HB.setUserAttr(\"lf\", Math.round((now-HB.getUserAttr(\"fv\"))/day));\n\n    // Track number of user visits\n    HB.setUserAttr(\"nv\", (HB.getUserAttr(\"nv\") || 0)+1);\n\n    // Set referrer if it is from a different domain (don't count internal referrers)\n    if ( document.referrer )\n    {\n      var tld = HB.getTLD().toLowerCase();\n      // Check to ensure that the tld is not present in the \n      var referrer = (document.referrer+\"\").replace(/.*?\\:\\/\\//,\"\").replace(/www\\./i,\"\").toLowerCase().substr(0,150);\n      var referrerDomain = referrer.replace(/(.*?)\\/.*/, \"$1\");\n      if ( referrerDomain.indexOf(tld) == -1 )\n      {\n        // This is an external referrer\n        // Set the original referrer if not set\n        if ( !HB.getUserAttr(\"or\" ))\n          HB.setUserAttr(\"or\", referrer);\n        // Set the full referrer\n        HB.setUserAttr(\"rf\", referrer);\n        // Set the referrer domain\n        HB.setUserAttr(\"rd\", referrerDomain);\n\n        // Check for search terms\n        var referrerQueryParts = referrer.split(\"?\")[1];\n        if ( referrerQueryParts )\n        {\n          // Build a hash of decoded params;\n          var params = {};\n          var pairs = referrerQueryParts.split(\"&\");\n          for(var i=0;i<pairs.length;i++)\n          {\n            var key, value;\n            var components = pairs[i].split(\"=\");\n            key = decodeURIComponent(components[0]).toLowerCase();\n            value = decodeURIComponent(components[1]);\n            params[key] = value;\n          }\n\n          // Check for search terms\n          var search = params['query'] || params['q'] || params['search'];\n          if ( search )\n            HB.setUserAttr(\"st\", search);\n          // Check for UTM variables and set them if present\n          HB.setUserAttr('ad_so', params['utm_source'], true);\n          HB.setUserAttr('ad_ca', params['utm_campaign'], true);\n          HB.setUserAttr('ad_me', params['utm_medium'], true);\n          HB.setUserAttr('ad_co', params['utm_content'], true);\n          HB.setUserAttr('ad_te', params['utm_term'], true);\n        }\n      }\n    }\n    // Set the page URL\n    HB.setUserAttr(\"pu\", (document.location+\"\").split(\"#\")[0]);\n    // Set the date\n    HB.setUserAttr(\"dt\", nowDate.getUTCFullYear()+\"-\"+(nowDate.getUTCMonth()+1)+\"-\"+nowDate.getUTCDate());\n    // Set the timestamp - this can be used for filtering\n    HB.setUserAttr(\"ts\", now);\n\n    // Detect the device\n    var ua = navigator.userAgent;\n    if (ua.match(/(mobi|phone|ipod|blackberry|docomo)/i))\n      HB.setUserAttr(\"dv\", \"mobile\");\n    else if (ua.match(/(ipad|kindle|android)/i))\n      HB.setUserAttr(\"dv\", \"tablet\");\n    else\n      HB.setUserAttr(\"dv\", \"computer\");\n  },\n\n  // This code returns the root domain of the current site so \"www.yahoo.co.jp\" will return \"yahoo.co.jp\" and \"blog.kissmetrics.com\n  // will return kissmetrics.com. It does so by setting a cookie on each \"part\" until successful (first tries \".jp\" then \".co.jp\"\n  // then \"yahoo.co.jp\"\n  getTLD: function(){\n    var i,h,\n    wc='tld=ck',\n    hostname = document.location.hostname.split('.');\n    for(i=hostname.length-1; i>=0; i--) {\n      h = hostname.slice(i).join('.');\n      document.cookie = wc + ';domain=.' + h + ';';\n      if(document.cookie.indexOf(wc)>-1){\n        document.cookie = wc.split('=')[0] + '=;domain=.' + h + ';expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        return h;\n      }\n    }\n    return document.location.hostname;\n  },\n\n  // Takes the given element and \"shakes\" it a few times and returns\n  // it to its original style and positioning. Used to shake the \n  // email field when it is invalid.\n  shake: function(element){\n    (function(element){\n      var velocity = 0;\n      var acceleration = -0.1;\n      var maxTravel = 1;\n      // Store the original position\n      var origPosition = element.style.position;\n      var origX = parseInt(element.style.left, 0) || 0;\n      var x = origX;\n      var numShakes = 0;\n      // Set the positioning to relevant\n      element.style.position = \"relative\";\n      var interval = setInterval(function(){\n        velocity += acceleration;\n        if ( x-origX >= maxTravel && acceleration > 0)\n          acceleration *= -1;\n        if ( x-origX <= -maxTravel && acceleration < 0)\n        {\n          numShakes += 1;\n          acceleration *= -1;\n        }\n        x += velocity;\n        if ( numShakes >= 2 && x >= origX )\n        {\n          clearInterval(interval);\n          element.style.left = origX+\"px\";\n          element.style.position = origPosition;\n        }\n        element.style.left = Math.round(x)+\"px\";\n      }, 5);\n    })(HB.$(element));\n  }\n};\n\n\n\nif (Object.prototype.toString.call( _hbq ) === \"[object Array]\") { // _hbq is not the instance of HBQ yet\n  HB = _HB;\n  \n  \n    HB.setTemplate(\"CollectEmail\", \"<div id=\\\"hellobar\\\" class=\\\"{{bar.size}} {{bar.tab_side}} {{HB.t(bar.show_border) ? 'has_border' : ''}} {{HB.t(bar.remains_at_top) ? 'remains_at_top' : ''}}\\\" style=\\\"background-color: \#{{bar.bar_color}}; color: \#{{bar.text_color}}; font-family: {{bar.font}}; border-color: \#{{bar.border_color}};\\\">\\n<div id=\\\"hb_msg_container\\\">\\n<span>\\n  {{bar.message}}\\n  <input id=\\\"hb_email\\\" type=\\\"email\\\" placeholder=\\\"Your Email\\\"/>\\n  <input id=\\\"hb_name\\\" type=\\\"text\\\" placeholder=\\\"Your Name\\\" {{HB.t(bar.goal.data.collect_names) ? \\\"\\\" : \\\"style='display:none'\\\"}}/>\\n</span>\\n<a onclick=\\\"window.parent.HB.submitEmail(document.getElementById('hb_email'), document.getElementById('hb_name'), document.getElementById('hb_msg_container')); return false\\\" href=\\\"#\\\" class=\\\"hellobar_cta hb-{{bar.link_style}}\\\" style=\\\"color: \#{{bar.link_color}}; background-color: \#{{bar.button_color}}; border-color: \#{{bar.button_color}}\\\">\\n  {{bar.link_text}}\\n</a>\\n</div>\\n  <a href=\\\"http://www.hellobar.com/?utm_medium=hellobar&utm_campaign=HBlogo\\\" target=\\\"_parent\\\" class=\\\"hellobar_logo\\\"><img src=\\\"https://s3.amazonaws.com/hb-assets/logo_white.png\\\" alt=\\\"Hello Bar\\\" /></a>\\n  <a href=\\\"#\\\" class=\\\"hellobar_arrow\\\" style=\\\"{{HB.t(bar.closable) ? '' : 'display:none'}}\\\"><img src=\\\"https://s3.amazonaws.com/hb-assets/arrow_white.png\\\" alt=\\\"\\\" /></a>\\n  <div id=\\\"hellobar-shadow\\\"></div>\\n</div>\\n\");\n  \n  \n  HB.addCSS(\"#hellobar_pusher{height:30px;position:relative;overflow:hidden}#hellobar{min-height:30px;height:auto;text-align:center;width:100%;_width:expression(eval(document.body.offsetWidth-20));top:0;left:0;margin:0;padding:0;z-index:5000;position:absolute}#hellobar.has_border{border-bottom:3px solid white}#hellobar_pusher.large{height:50px}#hellobar.large{min-height:50px;height:auto;font-size:17px;font-weight:600}#hellobar.large span{font-size:17px}#hellobar.large a{line-height:45px}#hellobar.large a.hellobar_cta.hb-text{line-height:48px}#hellobar.large span{line-height:25px}#hellobar.large a.hellobar_logo{top:10px}#hellobar.large a.hellobar_logo img{height:29px;width:48px}#hellobar.large a.hellobar_arrow{top:10px}#hellobar.large a.hellobar_arrow img{height:29px;width:28px}#hellobar.large a.hellobar_cta.hb-button{padding:6px 15px}#hellobar.regular{font-size:14px}#hellobar.regular span{font-size:14px}#hellobar.regular a{line-height:30px}#hellobar.regular a.hellobar_cta.hb-text{line-height:28px}#hellobar.regular span{line-height:20px;margin-top:3px}#hellobar.regular a.hellobar_logo{top:4px}#hellobar.regular a.hellobar_logo img{height:21px;width:33px}#hellobar.regular a.hellobar_arrow{top:4px}#hellobar.regular a.hellobar_arrow img{height:21px;width:21px}#hellobar.regular a.hellobar_cta.hb-button{padding:2px 8px}#hellobar{white-space:normal}#hellobar span{margin-left:50px;margin-right:20px;margin-top:13px;display:inline-block}#hellobar a{margin-right:30px}#hellobar.large span{margin-left:65px}#hellobar.large.mobile span,#hellobar.regular.mobile span{margin-left:10px}#hellobar.large a{margin-right:65px}#hellobar a.hellobar_cta.hb-text{padding:6px 15px;border-radius:4px;color:#fff;padding-left:5px;text-decoration:underline;background:none!important}#hellobar a:hover.hellobar_cta.hb-text{}#hellobar a img{border:none;padding:0;margin:0;background-color:transparent}#hellobar a.hellobar_cta.hb-button{border:1px solid;box-shadow:inset 0 1px 1px rgba(255,255,255,0.1);border-radius:4px;margin:0;margin-left:10px;text-decoration:none;color:#fff;white-space:nowrap}#hellobar.mobile a.hellobar_logo{display:none}#hellobar.mobile a.hellobar_arrow{display:none}#hellobar a.hellobar_logo{position:absolute;display:block;left:10px;right:auto;opacity:.3}#hellobar a.hellobar_arrow{display:block;position:absolute;right:10px;left:auto;opacity:.3}#hellobar.left a.hellobar_logo{right:10px;left:auto}#hellobar.left a.hellobar_arrow{left:10px;right:auto}a:hover.hellobar_logo,a:hover.hellobar_arrow{opacity:.6}#hellobar-shadow{left:0;width:100%;height:8px;line-height:8px;background:url(https://s3.amazonaws.com/hb-assets/system/modules/hellobar/lib/sprite-8bit.png);position:absolute;margin-top:-3px;display:none}#hellobar.has_border #hellobar-shadow{margin-top:0}#hellobar input{box-shadow:inset 1px 1px 3px #aaa;border-radius:4px;border:none;width:150px;margin-left:10px;vertical-align:middle;padding:3px 3px;margin-bottom:2px;margin-top:0}#hellobar.large input{padding:5px 5px;margin-bottom:5px;margin-top:0}#hellobar iframe{vertical-align:middle}#hellobar.large span.social-wrapper{white-space:nowrap;margin:0}#hellobar.large span.twitter-share-button-wrapper{width:110px}#hellobar.large span.twitter-follow-button-wrapper{width:130px}#hellobar.large span.fb-like-wrapper{width:80px}#hellobar.large span.linkedin-button-wrapper{width:105px}#hellobar.large span.g-plusone-wrapper{width:110px}#hellobar.large span.pinterest-pin-button-wrapper{width:50px}#hellobar.large span.pinterest-follow-button-wrapper{width:100px}#hellobar span.fb_iframe_widget,#hellobar span.fb_iframe_widget span{margin:0;overflow:hidden}#hellobar span.fb_iframe_widget{position:relative;top:4px}#hellobar span.linkedin-button{line-height:normal;position:relative;top:5px;margin:0}#hellobar span.linkedin-button span{line-height:normal;margin:0;font-size:100%}#hellobar div#___plusone_0,#hellobar div#___follow_0{vertical-align:middle!important}#hellobar span.pinterest-pin-button{position:relative;top:5px;margin:0}#hellobar span.pinterest-pin-button a{margin:0}#hellobar span.pinterest-follow-button{position:relative;top:-2px;margin-left:0}#hellobar span.pinterest-follow-button a{display:none}#hellobar a.buffer-add-button{width:55px;height:20px;display:inline-block;overflow:hidden;background-image:url(https://d389zggrogs7qo.cloudfront.net/images/buffer_button.png);position:relative;top:4px;margin-right:0}#hellobar a.buffer-add-button:hover{background-position:0 -20px}.gc-bubbleDefault,.pls-container{display:none!important}\");\n  \n  HB.extCSS = \"#hellobar_container{width:100%;height:40px;border:none;padding:0;margin:0;position:absolute;overflow:hidden;left:0;top:0;z-index:17000}#hellobar_container.large{height:60px}#hellobar_container.remains_at_top{position:fixed;_position:absolute;top:0;_top:expression(eval(document.body.scrollTop))}#hellobar_pusher{height:30px;position:relative;overflow:hidden}#hellobar_pusher.large{height:50px}\"; \n}\n\n_hbq.push(function(){HB.addGoal(function(){return true;},[{\"remains_at_top\":\"true\",\"open_in_new_window\":\"false\",\"pushes_page_down\":\"true\",\"closable\":\"false\",\"show_wait\":0,\"hide_after\":0,\"wiggle_wait\":0,\"link_style\":\"button\",\"message\":\"Get Rock Pillow giveaways and exclusive coupons\",\"link_text\":\"Yes! Send Me a Coupon\",\"bar_color\":\"18adfe\",\"text_color\":\"ffffff\",\"link_color\":\"ffffff\",\"border_color\":\"ffffff\",\"texture\":\"none\",\"show_border\":\"false\",\"font\":\"Helvetica,Arial,sans-serif\",\"tab_side\":\"right\",\"button_color\":\"000000\",\"size\":\"regular\",\"thank_you_text\":\"Thank you for signing up!\",\"id\":17460,\"target\":null,\"template_name\":\"CollectEmail\"}],1,{\"url\":\"http://yoursite.com/goal\",\"collect_names\":\"1\",\"id\":14313,\"type\":\"CollectEmail\"})});\n_hbq = new HBQ();
